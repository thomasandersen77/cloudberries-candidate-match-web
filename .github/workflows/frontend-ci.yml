# .github/workflows/frontend-ci.yml
name: Frontend CI

# This workflow runs on pushes to any branch and on pull requests targeting the main branch.
on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # This job runs on push and PR to check for basic correctness
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      # --- Steg 1: Kode-oppsett ---
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Henter hele historikken for 친 kunne sammenligne branches

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Build application
        run: npm run build

      # --- Steg 3: Kall Gemini API for kode-review ---
      - name: Perform Code Review with Gemini
        if: ${{ success() }}
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          PROMPT_TEMPLATE=$(cat .github/prompts/pr_review_prompt.txt)
          CODE_DIFF=$(git diff origin/main...HEAD)
          
          # Bygg payload p친 en sikker m친te
          FULL_PROMPT="${PROMPT_TEMPLATE//\{diff\}/$CODE_DIFF}"
          JSON_PAYLOAD=$(jq -n --arg text_content "$FULL_PROMPT" \
            '{contents: [{parts: [{text: $text_content}]}]}')

          # Logikk for 친 pr칮ve p친 nytt (retry) med fallback p친 API-versjon
          MAX_ATTEMPTS=3
          RETRY_DELAY=5 # Sekunder
          MODEL="${GEMINI_MODEL:-gemini-1.5-pro-002}"
          SUCCESS=0
          for ((i=1; i<=MAX_ATTEMPTS; i++)); do
            echo "::notice::Fors칮k $i av $MAX_ATTEMPTS p친 친 kalle Gemini API..."
            for API_VERSION in v1 v1beta; do
              echo "::notice::Pr칮ver ${API_VERSION} med modell ${MODEL}..."
              # Bruk -w for 친 f친 http-status og body separat
              HTTP_RESPONSE=$(curl -s -w "%{http_code}" -X POST \
                "https://generativelanguage.googleapis.com/${API_VERSION}/models/${MODEL}:generateContent?key=$GEMINI_API_KEY" \
                -H "Content-Type: application/json" \
                -d "$JSON_PAYLOAD")
              HTTP_STATUS_CODE=${HTTP_RESPONSE: -3}
              GEMINI_RESPONSE=${HTTP_RESPONSE:0:${#HTTP_RESPONSE}-3}
              if [ "$HTTP_STATUS_CODE" -eq 200 ]; then
                echo "::notice::Suksess fra Gemini API (${API_VERSION})."
                SUCCESS=1
                break
              else
                echo "::warning::HTTP $HTTP_STATUS_CODE fra ${API_VERSION}. Respons: $GEMINI_RESPONSE"
              fi
            done
            if [ "$SUCCESS" -eq 1 ]; then
              break
            fi
            if [ "$i" -lt "$MAX_ATTEMPTS" ]; then
              echo "::notice::Pr칮ver igjen om $RETRY_DELAY sekunder..."
              sleep $RETRY_DELAY
            else
              echo "::error::Feil fra Gemini API etter $MAX_ATTEMPTS fors칮k."
              exit 1
            fi
          done

          # Sjekk for feil i selve JSON-responsen
          if echo "$GEMINI_RESPONSE" | jq -e '.error' > /dev/null; then
            echo "::error::Gemini API returnerte en feilmelding:"
            echo "$GEMINI_RESPONSE"
            exit 1
          fi

          echo "$GEMINI_RESPONSE" | jq -r '.candidates[0].content.parts[0].text' > gemini_review.txt
          echo "Gemini-review lagret i gemini_review.txt"
      # --- Steg 4: Publiser review som en kommentar p친 Pull Requesten ---
      - name: Comment on Pull Request
        if: ${{ success() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const review = fs.readFileSync('gemini_review.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 游뱄 Gemini Code Review\n\n${review}`
            });
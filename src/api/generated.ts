/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List skills across consultants */
        get: {
            parameters: {
                query?: {
                    /** @description Optional skill filter (repeat to filter by multiple) */
                    skill?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Skill aggregates */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SkillInCompanyDto"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Analyze content with AI */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AIAnalysisRequest"];
                };
            };
            responses: {
                /** @description Analysis result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AIResponseModel"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List consultants (paged) */
        get: {
            parameters: {
                query?: {
                    /** @description Optional name filter (contains) */
                    name?: string;
                    /** @description Page number (0-indexed) */
                    page?: components["parameters"]["PageParam"];
                    /** @description Page size */
                    size?: components["parameters"]["SizeParam"];
                    /** @description Sort field(s), e.g. `name,asc`. Repeat for multi-sort. */
                    sort?: components["parameters"]["SortParam"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paged consultants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PageConsultantSummaryDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/with-cv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all consultants with their CVs (normalized entities) */
        get: {
            parameters: {
                query?: {
                    /** @description If true, include only active CVs for each consultant */
                    onlyActiveCv?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Consultants with nested CV structures */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConsultantWithCvDto"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/with-cv/paged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List consultants with CVs (paged) */
        get: {
            parameters: {
                query?: {
                    /** @description If true, include only active CVs for each consultant */
                    onlyActiveCv?: boolean;
                    /** @description Page number (0-indexed) */
                    page?: components["parameters"]["PageParam"];
                    /** @description Page size */
                    size?: components["parameters"]["SizeParam"];
                    /** @description Sort field(s), e.g. `name,asc`. Repeat for multi-sort. */
                    sort?: components["parameters"]["SortParam"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paged consultants with CVs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PageConsultantWithCvDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/sync/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger a sync from Flowcase */
        post: {
            parameters: {
                query?: {
                    /** @description Max number of users to sync in this run */
                    batchSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sync summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        };
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Relational search for consultants */
        post: operations["searchConsultantsRelational"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/search/semantic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Semantic (vector) search for consultants
         * @description Embeds the provided text using the configured EmbeddingProvider and performs pgvector similarity search.
         */
        post: operations["searchConsultantsSemantic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/search/embedding-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get embedding provider information
         * @description Returns information about the available embedding provider for semantic search
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Embedding provider information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmbeddingProviderInfo"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cv/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a consultant's CV (raw JSON) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description CV data (shape depends on source) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CvData"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/embeddings/run/jason": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate embeddings for Jason (demo) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmbeddingJasonRunResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/embeddings/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate embeddings for a specific user/cv */
        post: {
            parameters: {
                query: {
                    userId: string;
                    cvId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmbeddingUserCvRunResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/embeddings/run/missing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate embeddings for users missing vectors */
        post: {
            parameters: {
                query?: {
                    batchSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmbeddingRunMissingResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Health status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Find candidate matches for a project request */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MatchApiRequest"];
                };
            };
            responses: {
                /** @description List of candidate matches */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandidateMatchResponse"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matches/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a CV PDF and find matches */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file: string;
                        projectRequestText: string;
                    };
                };
            };
            responses: {
                /** @description List of candidate matches */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandidateMatchResponse"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matches/by-skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Find candidate matches given a list of skills
         * @description Uses AI matching against all known consultants using a prompt derived from the provided skills.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "skills": [
                     *         "java",
                     *         "azure",
                     *         "react"
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["SkillsRequest"];
                };
            };
            responses: {
                /** @description List of candidate matches */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandidateMatchResponse"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List stored customer project requests (compact) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Project requests */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectRequestResponseDto"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-requests/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload and analyze a customer project request PDF */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file: string;
                    };
                };
            };
            responses: {
                /** @description Extracted project request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectRequestResponseDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get stored customer project request by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Project request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectRequestResponseDto"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cv-score/{candidateId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get CV score for a candidate */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    candidateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Candidate CV score */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CvScoreDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        /**
         * Trigger scoring for single candidate
         * @description Runs CV scoring for the specified candidate and stores/returns the latest score.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    candidateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated candidate CV score */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CvScoreDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cv-score/run/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger scoring for all consultants */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Scoring summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CvScoringRunResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cv-score/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all candidates (summary) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Candidates */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandidateDTO"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RelationalSearchRequest: {
            /** @description Name filter (contains match) */
            name?: string;
            /** @description Skills that must ALL be present (AND condition) */
            skillsAll?: string[];
            /** @description Skills where ANY can be present (OR condition) */
            skillsAny?: string[];
            /** @description Minimum CV quality score */
            minQualityScore?: number;
            /**
             * @description Only include active CVs
             * @default false
             */
            onlyActiveCv: boolean;
        };
        SemanticSearchRequest: {
            /** @description Natural language search text */
            text: string;
            /**
             * @description Embedding provider (must match server configuration)
             * @default GOOGLE_GEMINI
             */
            provider: string;
            /**
             * @description Embedding model (must match server configuration)
             * @default text-embedding-004
             */
            model: string;
            /**
             * @description Maximum number of results to return
             * @default 10
             */
            topK: number;
            /** @description Minimum CV quality score */
            minQualityScore?: number;
            /**
             * @description Only include active CVs
             * @default false
             */
            onlyActiveCv: boolean;
        };
        EmbeddingProviderInfo: {
            /** @description Whether semantic search is available */
            enabled: boolean;
            /** @description Name of the embedding provider */
            provider: string;
            /** @description Name of the embedding model */
            model: string;
            /** @description Vector dimension of the embeddings */
            dimension: number;
        };
        /** @enum {string} */
        Skill: "BACKEND" | "FRONTEND" | "JAVA" | "KOTLIN" | "REACT" | "TYPESCRIPT" | "ARCHITECTURE";
        SkillInCompanyDto: {
            name: string;
            /** @description Number of consultants with this skill (preferred) */
            consultantCount?: number;
            /**
             * @deprecated
             * @description Number of consultants with this skill (deprecated)
             */
            konsulenterMedSkill: number;
            konsulenter: components["schemas"]["ConsultantSummaryDto"][];
        };
        AIAnalysisRequest: {
            /** @description Content to analyze */
            content: string;
        };
        AIResponseModel: {
            content?: string;
            modelUsed?: string;
        };
        ConsultantSummaryDto: {
            userId: string;
            name: string;
            /** Format: email */
            email: string;
            bornYear: number;
            defaultCvId: string;
        };
        PageConsultantSummaryDto: {
            content?: components["schemas"]["ConsultantSummaryDto"][];
            /** @description Page number (0-indexed) */
            number?: number;
            size?: number;
            totalElements?: number;
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            sort?: {
                [key: string]: unknown;
            };
            pageable?: {
                [key: string]: unknown;
            };
        };
        ConsultantWithCvDto: {
            /** Format: int64 */
            id?: number | null;
            userId: string;
            name: string;
            cvId: string;
            skills: string[];
            cvs: components["schemas"]["ConsultantCvDto"][];
        };
        ConsultantCvDto: {
            /** Format: int64 */
            id?: number | null;
            versionTag?: string | null;
            qualityScore?: number | null;
            active: boolean;
            keyQualifications?: components["schemas"]["KeyQualificationDto"][];
            education?: components["schemas"]["EducationDto"][];
            workExperience?: components["schemas"]["WorkExperienceDto"][];
            projectExperience?: components["schemas"]["ProjectExperienceDto"][];
            certifications?: components["schemas"]["CertificationDto"][];
            courses?: components["schemas"]["CourseDto"][];
            languages?: components["schemas"]["LanguageDto"][];
            skillCategories?: components["schemas"]["SkillCategoryDto"][];
            attachments?: components["schemas"]["AttachmentDto"][];
        };
        KeyQualificationDto: {
            label?: string | null;
            description?: string | null;
        };
        EducationDto: {
            degree?: string | null;
            school?: string | null;
            fromYearMonth?: string | null;
            toYearMonth?: string | null;
        };
        WorkExperienceDto: {
            employer?: string | null;
            fromYearMonth?: string | null;
            toYearMonth?: string | null;
        };
        ProjectExperienceDto: {
            customer?: string | null;
            description?: string | null;
            longDescription?: string | null;
            fromYearMonth?: string | null;
            toYearMonth?: string | null;
            roles?: components["schemas"]["ProjectRoleDto"][];
            skills?: string[];
        };
        ProjectRoleDto: {
            name?: string | null;
            description?: string | null;
        };
        CertificationDto: {
            name?: string | null;
            year?: number | null;
        };
        CourseDto: {
            name?: string | null;
            organizer?: string | null;
            year?: number | null;
        };
        LanguageDto: {
            name?: string | null;
            level?: string | null;
        };
        SkillCategoryDto: {
            name?: string | null;
            skills?: components["schemas"]["SkillInCategoryDto"][];
        };
        SkillInCategoryDto: {
            name?: string | null;
            durationYears?: number | null;
        };
        AttachmentDto: {
            fileName?: string | null;
            url?: string | null;
        };
        PageConsultantWithCvDto: {
            content?: components["schemas"]["ConsultantWithCvDto"][];
            number?: number;
            size?: number;
            totalElements?: number;
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            sort?: {
                [key: string]: unknown;
            };
            pageable?: {
                [key: string]: unknown;
            };
        };
        /** @description Arbitrary CV JSON structure from Flowcase (includes optional displayName when available) */
        CvData: {
            /** @description Human-friendly name derived from consultant record */
            displayName?: string;
        } & {
            [key: string]: unknown;
        };
        EmbeddingJasonRunResponse: {
            processedJason?: boolean;
        };
        EmbeddingUserCvRunResponse: {
            userId: string;
            cvId: string;
            processed: boolean;
        };
        EmbeddingRunMissingResponse: {
            processedCount?: number;
            batchSize?: number;
        };
        HealthResponse: {
            /** @enum {string} */
            status?: "UP" | "DOWN" | "OUT_OF_SERVICE" | "UNKNOWN";
            details?: {
                [key: string]: string;
            };
        };
        MatchApiRequest: {
            /** @description Project request text/requirements */
            projectRequestText: string;
        };
        SkillsRequest: {
            skills: string[];
        };
        CandidateMatchResponse: {
            /** @description Overall match score (string in current implementation) */
            totalScore: string;
            summary: string;
            matchTimeSeconds?: number;
            requirements?: components["schemas"]["Requirement"][];
        };
        Requirement: {
            name: string;
            comment: string;
            score: string;
        };
        CandidateDTO: {
            id: string;
            name: string;
            birthYear: number;
        };
        CvScoreDto: {
            candidateId: string;
            scorePercent: number;
            summary: string;
            strengths: string[];
            potentialImprovements: string[];
        };
        CvScoringRunResponse: {
            processedCount: number;
        };
        ProjectRequestResponseDto: {
            /** Format: int64 */
            id?: number;
            customerName?: string;
            title?: string;
            summary?: string;
            originalFilename?: string;
            mustRequirements?: components["schemas"]["ProjectRequirementDto"][];
            shouldRequirements?: components["schemas"]["ProjectRequirementDto"][];
        };
        ProjectRequirementDto: {
            name: string;
            details?: string;
        };
        /** @description Generic error payload */
        Problem: {
            status?: number;
            error?: string;
            message?: string;
            path?: string;
        };
    };
    responses: {
        /** @description Error response */
        ErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Problem"];
            };
        };
    };
    parameters: {
        /** @description Page number (0-indexed) */
        PageParam: number;
        /** @description Page size */
        SizeParam: number;
        /** @description Sort field(s), e.g. `name,asc`. Repeat for multi-sort. */
        SortParam: string[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    searchConsultantsRelational: {
        parameters: {
            query?: {
                /** @description Page number (0-indexed) */
                page?: components["parameters"]["PageParam"];
                /** @description Page size */
                size?: components["parameters"]["SizeParam"];
                /** @description Sort field(s), e.g. `name,asc`. Repeat for multi-sort. */
                sort?: components["parameters"]["SortParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "kotlin",
                 *       "skillsAll": [
                 *         "KOTLIN"
                 *       ],
                 *       "skillsAny": [
                 *         "BACKEND"
                 *       ],
                 *       "minQualityScore": 70,
                 *       "onlyActiveCv": true
                 *     } */
                "application/json": components["schemas"]["RelationalSearchRequest"];
            };
        };
        responses: {
            /** @description Paged consultants matching filters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageConsultantWithCvDto"];
                };
            };
            /** @description Invalid search criteria */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["ErrorResponse"];
        };
    };
    searchConsultantsSemantic: {
        parameters: {
            query?: {
                /** @description Page number (0-indexed) */
                page?: components["parameters"]["PageParam"];
                /** @description Page size */
                size?: components["parameters"]["SizeParam"];
                /** @description Sort field(s), e.g. `name,asc`. Repeat for multi-sort. */
                sort?: components["parameters"]["SortParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "text": "Senior Kotlin developer with Spring experience",
                 *       "provider": "GOOGLE_GEMINI",
                 *       "model": "text-embedding-004",
                 *       "topK": 5,
                 *       "minQualityScore": 80,
                 *       "onlyActiveCv": true
                 *     } */
                "application/json": components["schemas"]["SemanticSearchRequest"];
            };
        };
        responses: {
            /** @description Top-K semantically similar consultants */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageConsultantWithCvDto"];
                };
            };
            /** @description Invalid search criteria */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Embedding provider disabled or not configured */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["ErrorResponse"];
        };
    };
}

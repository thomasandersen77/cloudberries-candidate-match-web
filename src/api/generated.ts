/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/analytics/programming-languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Programming language statistics
         * @description Returns counts, percentages, and aggregated experience years per language.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Optional list of languages to include (defaults to Kotlin, Java, C#, Python) */
                    languages?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Language stats */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProgrammingLanguageStat"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/analytics/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Consultant roles statistics
         * @description Percentage of consultants with experience as System Developer, Data Engineer, or Project Manager.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Role stats */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RoleStat"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/industries/backfill": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Backfill industry tags for all CVs */
        post: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Backfill processed count */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            processed?: number;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List skills across consultants */
        get: {
            parameters: {
                query?: {
                    /** @description Optional skill filter (repeat to filter by multiple) */
                    skill?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Skill aggregates */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SkillInCompanyDto"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Analyze content with AI */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AIAnalysisRequest"];
                };
            };
            responses: {
                /** @description Analysis result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AIResponseModel"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * AI-powered consultant search
         * @description Search consultants using natural language with intelligent routing to STRUCTURED, SEMANTIC, HYBRID, or RAG search modes
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChatSearchRequest"];
                };
            };
            responses: {
                /** @description Search results with AI interpretation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ChatSearchResponse"];
                    };
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List consultants (paged) */
        get: {
            parameters: {
                query?: {
                    /** @description Optional name filter (contains) */
                    name?: string;
                    /** @description Page number (0-indexed) */
                    page?: components["parameters"]["PageParam"];
                    /** @description Page size */
                    size?: components["parameters"]["SizeParam"];
                    /** @description Sort field(s), e.g. `name,asc`. Repeat for multi-sort. */
                    sort?: components["parameters"]["SortParam"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paged consultants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PageConsultantSummaryDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/with-cv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all consultants with their CVs (normalized entities) */
        get: {
            parameters: {
                query?: {
                    /** @description If true, include only active CVs for each consultant */
                    onlyActiveCv?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Consultants with nested CV structures */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConsultantWithCvDto"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/with-cv/paged": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List consultants with CVs (paged) */
        get: {
            parameters: {
                query?: {
                    /** @description If true, include only active CVs for each consultant */
                    onlyActiveCv?: boolean;
                    /** @description Page number (0-indexed) */
                    page?: components["parameters"]["PageParam"];
                    /** @description Page size */
                    size?: components["parameters"]["SizeParam"];
                    /** @description Sort field(s), e.g. `name,asc`. Repeat for multi-sort. */
                    sort?: components["parameters"]["SortParam"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paged consultants with CVs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PageConsultantWithCvDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/{userId}/cvs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List CVs for a consultant by userId */
        get: {
            parameters: {
                query?: {
                    /** @description If true, include only the active CV */
                    onlyActiveCv?: boolean;
                };
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Consultant CVs */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConsultantCvDto"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get consultant summary by userId */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Consultant summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConsultantSummaryDto"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/sync/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger a sync from Flowcase */
        post: {
            parameters: {
                query?: {
                    /** @description Max number of users to sync in this run */
                    batchSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Sync summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        };
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Relational search for consultants */
        post: operations["searchConsultantsRelational"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/search/semantic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Semantic (vector) search for consultants
         * @description Embeds the provided text using the configured EmbeddingProvider and performs pgvector similarity search.
         */
        post: operations["searchConsultantsSemantic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/consultants/search/embedding-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get embedding provider information
         * @description Returns information about the available embedding provider for semantic search
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Embedding provider information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmbeddingProviderInfo"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cv/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a consultant's CV (raw JSON) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description CV data (shape depends on source) */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CvData"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/embeddings/run/jason": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate embeddings for Jason (demo) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmbeddingJasonRunResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/embeddings/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate embeddings for a specific user/cv */
        post: {
            parameters: {
                query: {
                    userId: string;
                    cvId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmbeddingUserCvRunResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/embeddings/run/missing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate embeddings for users missing vectors */
        post: {
            parameters: {
                query?: {
                    batchSize?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Operation result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmbeddingRunMissingResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health check */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Health status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HealthResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matches": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Find candidate matches for a project request */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MatchApiRequest"];
                };
            };
            responses: {
                /** @description List of candidate matches */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandidateMatchResponse"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matches/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a CV PDF and find matches */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file: string;
                        projectRequestText: string;
                    };
                };
            };
            responses: {
                /** @description List of candidate matches */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandidateMatchResponse"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matches/by-skills": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Find candidate matches given a list of skills
         * @description Uses AI matching against all known consultants using a prompt derived from the provided skills.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "skills": [
                     *         "java",
                     *         "azure",
                     *         "react"
                     *       ]
                     *     } */
                    "application/json": components["schemas"]["SkillsRequest"];
                };
            };
            responses: {
                /** @description List of candidate matches */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandidateMatchResponse"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matches/requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List project requests (uploaded customer documents) with coverage info */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    size?: number;
                    sort?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paged list of requests with coverage */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PagedMatchesListDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/matches/requests/{id}/top-consultants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get top consultants for a request (AI-enriched) */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                };
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Top consultants */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["MatchConsultantDto"][];
                    };
                };
                /** @description Project request not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List stored customer project requests with pagination */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (0-based) */
                    page?: number;
                    /** @description Number of items per page */
                    size?: number;
                    /** @description Sort specification (field,direction) */
                    sort?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paged project requests */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PagedProjectRequestResponseDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        /** Create a new project request */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    /** @example {
                     *       "customerName": "Acme Corp AS",
                     *       "requiredSkills": [
                     *         "KOTLIN",
                     *         "JAVA"
                     *       ],
                     *       "startDate": "2024-04-01T09:00:00",
                     *       "endDate": "2024-10-01T17:00:00",
                     *       "responseDeadline": "2024-03-15T17:00:00",
                     *       "requestDescription": "We need a senior backend developer for a 6-month project using Kotlin and Spring Boot.",
                     *       "responsibleSalespersonEmail": "sales@acme.com"
                     *     } */
                    "application/json": components["schemas"]["CreateProjectRequestDto"];
                };
            };
            responses: {
                /** @description Project request created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectRequestDto"];
                    };
                };
                /** @description Invalid request data */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-requests/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload and analyze a customer project request PDF
         * @description Uploads a PDF document and uses AI to extract structured information including:
         *     - Customer name from the document
         *     - Project summary and requirements
         *     - MUST vs SHOULD requirements categorization
         *     - Project deadline (if mentioned)
         *     - Upload timestamp tracking
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file: string;
                    };
                };
            };
            responses: {
                /** @description Extracted project request with AI-analyzed structure */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "id": 123,
                         *       "customerName": "Acme Corporation AS",
                         *       "title": "Senior Kotlin Developer - Mobile Platform",
                         *       "summary": "Project for developing a new mobile banking application using Kotlin and modern Android architecture. Requires experienced developer with strong backend integration skills.",
                         *       "originalFilename": "project-request-acme-mobile.pdf",
                         *       "uploadedAt": "2024-10-01T10:30:00Z",
                         *       "deadlineDate": "2024-12-15T00:00:00Z",
                         *       "mustRequirements": [
                         *         {
                         *           "name": "5+ years experience with Kotlin/Android development",
                         *           "details": null
                         *         },
                         *         {
                         *           "name": "Experience with REST API integration",
                         *           "details": null
                         *         },
                         *         {
                         *           "name": "Knowledge of Material Design principles",
                         *           "details": null
                         *         }
                         *       ],
                         *       "shouldRequirements": [
                         *         {
                         *           "name": "Experience with Jetpack Compose",
                         *           "details": null
                         *         },
                         *         {
                         *           "name": "Familiarity with CI/CD pipelines",
                         *           "details": null
                         *         },
                         *         {
                         *           "name": "Previous fintech application experience",
                         *           "details": null
                         *         }
                         *       ]
                         *     } */
                        "application/json": components["schemas"]["ProjectRequestResponseDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get stored customer project request by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Project request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectRequestResponseDto"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-requests/{id}/close": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Close a project request */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Project request closed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectRequestDto"];
                    };
                };
                /** @description Project request not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-requests/{id}/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger AI analysis for a project request */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Analysis completed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProjectRequestDto"];
                    };
                };
                /** @description Project request not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project-requests/{id}/suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get AI suggestions for a project request */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description AI suggestions for the project request */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AISuggestionDto"][];
                    };
                };
                /** @description Project request not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cv-score/{candidateId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get CV score for a candidate */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    candidateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Candidate CV score */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CvScoreDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        /**
         * Trigger scoring for single candidate
         * @description Runs CV scoring for the specified candidate and stores/returns the latest score.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    candidateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Updated candidate CV score */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CvScoreDto"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cv-score/run/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger scoring for all consultants */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Scoring summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CvScoringRunResponse"];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/cv-score/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all candidates (summary) */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Candidates */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CandidateDTO"][];
                    };
                };
                default: components["responses"]["ErrorResponse"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ProgrammingLanguageStat: {
            language: string;
            consultantCount: number;
            /** Format: double */
            percentage: number;
            /** @description Sum of duration years (from consultant_skill and cv_skill_in_category) */
            aggregatedYears: number;
        };
        RoleStat: {
            role: string;
            consultantCount: number;
            /** Format: double */
            percentage: number;
        };
        /** @enum {string} */
        CoverageStatus: "GREEN" | "YELLOW" | "RED" | "NEUTRAL";
        MatchesListItemDto: {
            /** Format: int64 */
            id: number;
            title?: string | null;
            customerName?: string | null;
            /** Format: date-time */
            date?: string | null;
            /** Format: date-time */
            deadlineDate?: string | null;
            /** Format: int64 */
            hitCount: number;
            coverageStatus: components["schemas"]["CoverageStatus"];
            coverageLabel: string;
        };
        PagedMatchesListDto: {
            content?: components["schemas"]["MatchesListItemDto"][];
            /** Format: int64 */
            totalElements?: number;
            totalPages?: number;
            currentPage?: number;
            pageSize?: number;
            hasNext?: boolean;
            hasPrevious?: boolean;
        };
        MatchConsultantDto: {
            userId: string;
            name: string;
            cvId: string;
            /** Format: double */
            relevanceScore: number;
            justification?: string | null;
        };
        RelationalSearchRequest: {
            /** @description Name filter (contains match) */
            name?: string;
            /** @description Skills that must ALL be present (AND condition) */
            skillsAll?: string[];
            /** @description Skills where ANY can be present (OR condition) */
            skillsAny?: string[];
            /** @description Minimum CV quality score (0–100). Candidates without a score are treated as 0 for filtering. */
            minQualityScore?: number;
            /**
             * @description Only include active CVs
             * @default false
             */
            onlyActiveCv: boolean;
            pagination?: components["schemas"]["PaginationDto"];
        };
        SemanticSearchRequest: {
            /** @description Natural language search text */
            text: string;
            /**
             * @description Embedding provider (must match server configuration)
             * @default GOOGLE_GEMINI
             */
            provider: string;
            /**
             * @description Embedding model (must match server configuration)
             * @default text-embedding-004
             */
            model: string;
            /**
             * @description Maximum number of results to return
             * @default 10
             */
            topK: number;
            /** @description Minimum CV quality score (0–100). Candidates without a score are treated as 0 for filtering. */
            minQualityScore?: number;
            /**
             * @description Only include active CVs
             * @default false
             */
            onlyActiveCv: boolean;
            pagination?: components["schemas"]["PaginationDto"];
        };
        EmbeddingProviderInfo: {
            /** @description Whether semantic search is available */
            enabled: boolean;
            /** @description Name of the embedding provider */
            provider: string;
            /** @description Name of the embedding model */
            model: string;
            /** @description Vector dimension of the embeddings */
            dimension: number;
        };
        /** @enum {string} */
        Skill: "BACKEND" | "FRONTEND" | "JAVA" | "KOTLIN" | "REACT" | "TYPESCRIPT" | "ARCHITECTURE";
        SkillInCompanyDto: {
            name: string;
            /** @description Number of consultants with this skill (preferred) */
            consultantCount?: number;
            /**
             * @deprecated
             * @description Number of consultants with this skill (deprecated)
             */
            konsulenterMedSkill: number;
            konsulenter: components["schemas"]["ConsultantSummaryDto"][];
        };
        AIAnalysisRequest: {
            /**
             * Format: uuid
             * @description Optional conversation id to maintain multi-turn context
             */
            conversationId?: string | null;
            /** @description Content to analyze */
            content: string;
        };
        AIResponseModel: {
            content?: string;
            modelUsed?: string;
        };
        ConsultantSummaryDto: {
            userId: string;
            name: string;
            /** Format: email */
            email: string;
            bornYear: number;
            defaultCvId: string;
        };
        PageConsultantSummaryDto: {
            content?: components["schemas"]["ConsultantSummaryDto"][];
            /** @description Page number (0-indexed) */
            number?: number;
            size?: number;
            totalElements?: number;
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            sort?: {
                [key: string]: unknown;
            };
            pageable?: {
                [key: string]: unknown;
            };
        };
        ConsultantWithCvDto: {
            /** Format: int64 */
            id?: number | null;
            userId: string;
            name: string;
            cvId: string;
            /** @description Top 3 skills for the consultant when available */
            skills: string[];
            cvs: components["schemas"]["ConsultantCvDto"][];
        };
        ConsultantCvDto: {
            /** Format: int64 */
            id?: number | null;
            versionTag?: string | null;
            /** @description CV quality score (0–100); populated from cv_score.score_percent. May be null when no score exists. */
            qualityScore?: number | null;
            active: boolean;
            keyQualifications?: components["schemas"]["KeyQualificationDto"][];
            education?: components["schemas"]["EducationDto"][];
            workExperience?: components["schemas"]["WorkExperienceDto"][];
            projectExperience?: components["schemas"]["ProjectExperienceDto"][];
            certifications?: components["schemas"]["CertificationDto"][];
            courses?: components["schemas"]["CourseDto"][];
            languages?: components["schemas"]["LanguageDto"][];
            skillCategories?: components["schemas"]["SkillCategoryDto"][];
            attachments?: components["schemas"]["AttachmentDto"][];
            industries?: string[];
        };
        KeyQualificationDto: {
            label?: string | null;
            description?: string | null;
        };
        EducationDto: {
            degree?: string | null;
            school?: string | null;
            fromYearMonth?: string | null;
            toYearMonth?: string | null;
        };
        WorkExperienceDto: {
            employer?: string | null;
            fromYearMonth?: string | null;
            toYearMonth?: string | null;
        };
        ProjectExperienceDto: {
            customer?: string | null;
            description?: string | null;
            longDescription?: string | null;
            fromYearMonth?: string | null;
            toYearMonth?: string | null;
            roles?: components["schemas"]["ProjectRoleDto"][];
            skills?: string[];
        };
        ProjectRoleDto: {
            name?: string | null;
            description?: string | null;
        };
        CertificationDto: {
            name?: string | null;
            year?: number | null;
        };
        CourseDto: {
            name?: string | null;
            organizer?: string | null;
            year?: number | null;
        };
        LanguageDto: {
            name?: string | null;
            level?: string | null;
        };
        SkillCategoryDto: {
            name?: string | null;
            skills?: components["schemas"]["SkillInCategoryDto"][];
        };
        SkillInCategoryDto: {
            name?: string | null;
            durationYears?: number | null;
        };
        AttachmentDto: {
            fileName?: string | null;
            url?: string | null;
        };
        PageConsultantWithCvDto: {
            content?: components["schemas"]["ConsultantWithCvDto"][];
            number?: number;
            size?: number;
            totalElements?: number;
            totalPages?: number;
            first?: boolean;
            last?: boolean;
            sort?: {
                [key: string]: unknown;
            };
            pageable?: {
                [key: string]: unknown;
            };
        };
        /** @description Arbitrary CV JSON structure from Flowcase (includes optional displayName when available) */
        CvData: {
            /** @description Human-friendly name derived from consultant record */
            displayName?: string;
        } & {
            [key: string]: unknown;
        };
        EmbeddingJasonRunResponse: {
            processedJason?: boolean;
        };
        EmbeddingUserCvRunResponse: {
            userId: string;
            cvId: string;
            processed: boolean;
        };
        EmbeddingRunMissingResponse: {
            processedCount?: number;
            batchSize?: number;
        };
        HealthResponse: {
            /** @enum {string} */
            status?: "UP" | "DOWN" | "OUT_OF_SERVICE" | "UNKNOWN";
            details?: {
                [key: string]: string;
            };
        };
        MatchApiRequest: {
            /** @description Project request text/requirements */
            projectRequestText: string;
        };
        SkillsRequest: {
            skills: string[];
        };
        CandidateMatchResponse: {
            /** @description Overall match score (string in current implementation) */
            totalScore: string;
            summary: string;
            matchTimeSeconds?: number;
            requirements?: components["schemas"]["Requirement"][];
        };
        Requirement: {
            name: string;
            comment: string;
            score: string;
        };
        CandidateDTO: {
            id: string;
            name: string;
            birthYear: number;
        };
        CvScoreDto: {
            candidateId: string;
            scorePercent: number;
            summary: string;
            strengths: string[];
            potentialImprovements: string[];
        };
        CvScoringRunResponse: {
            processedCount: number;
        };
        ProjectRequestResponseDto: {
            /** Format: int64 */
            id?: number;
            /** @description Customer name extracted from the document */
            customerName?: string;
            /** @description Title/subject derived from the document */
            title?: string;
            /** @description AI-generated summary of the project request */
            summary?: string;
            /** @description Original filename of the uploaded PDF */
            originalFilename?: string;
            /**
             * Format: date-time
             * @description Timestamp when the document was uploaded
             */
            uploadedAt?: string;
            /**
             * Format: date-time
             * @description Project deadline extracted from the document (if available)
             */
            deadlineDate?: string;
            /** @description Critical requirements that must be met */
            mustRequirements?: components["schemas"]["ProjectRequirementDto"][];
            /** @description Preferred requirements that would be beneficial */
            shouldRequirements?: components["schemas"]["ProjectRequirementDto"][];
        };
        ProjectRequirementDto: {
            name: string;
            details?: string;
        };
        PagedProjectRequestResponseDto: {
            content?: components["schemas"]["ProjectRequestResponseDto"][];
            /** Format: int64 */
            totalElements?: number;
            totalPages?: number;
            currentPage?: number;
            pageSize?: number;
            hasNext?: boolean;
            hasPrevious?: boolean;
        };
        CreateProjectRequestDto: {
            customerName: string;
            requiredSkills: ("KOTLIN" | "JAVA" | "PYTHON" | "JAVASCRIPT" | "TYPESCRIPT" | "REACT" | "ANGULAR" | "VUE" | "SPRING_BOOT" | "BACKEND" | "FRONTEND" | "FULLSTACK" | "AZURE" | "AWS" | "DOCKER" | "KUBERNETES")[];
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            /** Format: date-time */
            responseDeadline: string;
            /**
             * @default OPEN
             * @enum {string}
             */
            status: "OPEN" | "IN_PROGRESS" | "CLOSED";
            requestDescription: string;
            /** Format: email */
            responsibleSalespersonEmail: string;
        };
        ProjectRequestDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            customerId?: number;
            customerName: string;
            requiredSkills: string[];
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            /** Format: date-time */
            responseDeadline: string;
            /** @enum {string} */
            status: "OPEN" | "IN_PROGRESS" | "CLOSED";
            requestDescription: string;
            /** Format: email */
            responsibleSalespersonEmail: string;
            aiSuggestions?: components["schemas"]["AISuggestionDto"][];
        };
        AISuggestionDto: {
            /** Format: int64 */
            id?: number;
            consultantName: string;
            userId: string;
            cvId: string;
            /** Format: double */
            matchScore: number;
            justification: string;
            /** Format: date-time */
            createdAt: string;
            skills?: string[];
        };
        PaginationDto: {
            /**
             * @description Page number (0-indexed)
             * @default 0
             */
            page: number;
            /**
             * @description Number of items per page
             * @default 10
             */
            size: number;
            /** @description Sort specifications (e.g. "name,asc", "id,desc") */
            sort?: string[];
        };
        /** @description Generic error payload */
        Problem: {
            status?: number;
            error?: string;
            message?: string;
            path?: string;
        };
        ChatSearchRequest: {
            /**
             * @description Optional conversation ID to maintain context
             * @example conv-123
             */
            conversationId?: string;
            /**
             * @description Optional consultant userId to target the query (used to bias or provide RAG context)
             * @example thomas.andersen
             */
            consultantId?: string;
            /**
             * @description Optional CV/resume id for the selected consultant; used to include CV JSON as context to the AI
             * @example default
             */
            cvId?: string;
            /**
             * @description Natural language search text
             * @example Find consultants who know Kotlin and Spring
             */
            text: string;
            /**
             * @description Force a specific search mode
             * @example STRUCTURED
             * @enum {string}
             */
            forceMode?: "STRUCTURED" | "SEMANTIC" | "HYBRID" | "RAG";
            /**
             * @description Maximum number of results to return
             * @default 10
             * @example 10
             */
            topK: number;
        };
        ChatSearchResponse: {
            /**
             * @description Search mode used
             * @example STRUCTURED
             * @enum {string}
             */
            mode: "STRUCTURED" | "SEMANTIC" | "HYBRID" | "RAG";
            /** @description Search results (for structured/semantic/hybrid modes) */
            results?: components["schemas"]["SearchResult"][];
            /**
             * @description Generated answer text (for RAG mode)
             * @example Based on the consultant's CV...
             */
            answer?: string;
            /** @description Sources used for RAG answers */
            sources?: components["schemas"]["RAGSource"][];
            /**
             * @description Response time in milliseconds
             * @example 1250
             */
            latencyMs: number;
            /** @description Optional debug information */
            debug?: components["schemas"]["DebugInfo"];
            /** @description Conversation ID for follow-up queries */
            conversationId?: string;
            scoring?: components["schemas"]["ScoringInfo"];
        };
        SearchResult: {
            /** @description Consultant userId */
            consultantId: string;
            /**
             * @description Consultant name
             * @example Thomas Andersen
             */
            name: string;
            /**
             * Format: double
             * @description Relevance score (0-1)
             * @example 0.87
             */
            score: number;
            /** @description Text highlights from matching */
            highlights?: string[];
            /** @description Additional metadata */
            meta?: {
                [key: string]: unknown;
            };
        };
        RAGSource: {
            /** @description Consultant userId */
            consultantId: string;
            /** @description Consultant name */
            consultantName: string;
            /** @description Chunk identifier */
            chunkId: string;
            /** @description Source text excerpt */
            text: string;
            /**
             * Format: double
             * @description Relevance score
             * @example 0.92
             */
            score: number;
            /**
             * @description CV section location
             * @example Experience
             */
            location?: string;
        };
        DebugInfo: {
            /** @description Query interpretation details */
            interpretation?: components["schemas"]["QueryInterpretation"];
            /** @description Timing breakdown */
            timings?: {
                [key: string]: number;
            };
            /** @description Additional debug data */
            extra?: {
                [key: string]: unknown;
            };
        };
        /** @description HYBRID scoring weights and formula */
        ScoringInfo: {
            /**
             * Format: double
             * @example 0.7
             */
            semanticWeight?: number;
            /**
             * Format: double
             * @example 0.3
             */
            qualityWeight?: number;
            /** @example combined = semanticWeight * semanticScore + qualityWeight * qualityScore */
            formula?: string;
        };
        QueryInterpretation: {
            /**
             * @description Determined search route
             * @example STRUCTURED
             * @enum {string}
             */
            route: "STRUCTURED" | "SEMANTIC" | "HYBRID" | "RAG";
            /** @description Extracted structured search criteria */
            structured?: components["schemas"]["StructuredCriteria"];
            /**
             * @description Semantic search text
             * @example experienced fullstack developer
             */
            semanticText?: string;
            /**
             * @description Detected consultant name
             * @example Thomas Andersen
             */
            consultantName?: string;
            /**
             * @description RAG question
             * @example What is his experience with React?
             */
            question?: string;
            /** @description Confidence scores for the interpretation */
            confidence: components["schemas"]["ConfidenceScores"];
        };
        StructuredCriteria: {
            /**
             * @description Skills that must all be present
             * @example [
             *       "kotlin",
             *       "spring"
             *     ]
             */
            skillsAll?: string[];
            /**
             * @description Skills where at least one must be present
             * @example [
             *       "architecture",
             *       "tech lead"
             *     ]
             */
            skillsAny?: string[];
            /**
             * @description Required roles or positions
             * @example [
             *       "senior developer",
             *       "tech lead"
             *     ]
             */
            roles?: string[];
            /**
             * @description Minimum quality score
             * @example 85
             */
            minQualityScore?: number;
            /** @description Location requirements */
            locations?: string[];
            /**
             * @description Availability requirements
             * @example available
             */
            availability?: string;
        };
        ConfidenceScores: {
            /**
             * Format: double
             * @description Confidence in route selection (0-1)
             * @example 0.87
             */
            route: number;
            /**
             * Format: double
             * @description Confidence in criteria extraction (0-1)
             * @example 0.92
             */
            extraction: number;
        };
    };
    responses: {
        /** @description Error response */
        ErrorResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Problem"];
            };
        };
    };
    parameters: {
        /** @description Page number (0-indexed) */
        PageParam: number;
        /** @description Page size */
        SizeParam: number;
        /** @description Sort field(s), e.g. `name,asc`. Repeat for multi-sort. */
        SortParam: string[];
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    searchConsultantsRelational: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "kotlin",
                 *       "skillsAll": [
                 *         "KOTLIN"
                 *       ],
                 *       "skillsAny": [
                 *         "BACKEND"
                 *       ],
                 *       "minQualityScore": 70,
                 *       "onlyActiveCv": true,
                 *       "pagination": {
                 *         "page": 0,
                 *         "size": 10,
                 *         "sort": [
                 *           "name,asc"
                 *         ]
                 *       }
                 *     } */
                "application/json": components["schemas"]["RelationalSearchRequest"];
            };
        };
        responses: {
            /** @description Paged consultants matching filters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageConsultantWithCvDto"];
                };
            };
            /** @description Invalid search criteria */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["ErrorResponse"];
        };
    };
    searchConsultantsSemantic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "text": "Senior Kotlin developer with Spring experience",
                 *       "provider": "GOOGLE_GEMINI",
                 *       "model": "text-embedding-004",
                 *       "topK": 5,
                 *       "minQualityScore": 80,
                 *       "onlyActiveCv": true,
                 *       "pagination": {
                 *         "page": 0,
                 *         "size": 10,
                 *         "sort": [
                 *           "name,asc"
                 *         ]
                 *       }
                 *     } */
                "application/json": components["schemas"]["SemanticSearchRequest"];
            };
        };
        responses: {
            /** @description Top-K semantically similar consultants */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageConsultantWithCvDto"];
                };
            };
            /** @description Invalid search criteria */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Embedding provider disabled or not configured */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["ErrorResponse"];
        };
    };
}

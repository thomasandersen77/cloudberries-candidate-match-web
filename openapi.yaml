openapi: 3.0.3
info:
  title: Cloudberries Candidate Match API
  version: 1.1.0
  description: |
    API for candidate matching, CV retrieval, embeddings, and health checks.
    Includes normalized health responses and skill-based matching endpoint.
    Generated from controller sources as of this commit.
  contact:
    name: Cloudberries
servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Chat
    description: AI content analysis
  - name: Skills
    description: Company skills overview
  - name: Consultants
    description: Consultant search and sync
  - name: CV
    description: Consultant CV retrieval
  - name: Embeddings
    description: CV embedding operations
  - name: Health
    description: Health checks
  - name: Matches
    description: Candidate matching
  - name: CV Scoring
    description: CV scoring utilities
  - name: Project Requests
    description: Customer project request management and analysis

paths:
  /api/industries/backfill:
    post:
      tags: [ Admin ]
      summary: Backfill industry tags for all CVs
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Backfill processed count
          content:
            application/json:
              schema:
                type: object
                properties:
                  processed:
                    type: integer
  /api/skills:
    get:
      tags: [ Skills ]
      summary: List skills across consultants
      parameters:
        - in: query
          name: skill
          description: Optional skill filter (repeat to filter by multiple)
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
      responses:
        '200':
          description: Skill aggregates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SkillInCompanyDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/chatbot/analyze:
    post:
      tags: [ Chat ]
      summary: Analyze content with AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIAnalysisRequest'
      responses:
        '200':
          description: Analysis result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIResponseModel'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/chatbot/search:
    post:
      tags: [ Chat ]
      summary: AI-powered consultant search
      description: Search consultants using natural language with intelligent routing to STRUCTURED, SEMANTIC, HYBRID, or RAG search modes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatSearchRequest'
            examples:
              structured:
                summary: Structured search example
                value:
                  text: "Find consultants who know Kotlin and Spring"
                  topK: 10
              semantic:
                summary: Semantic search example  
                value:
                  text: "Experienced fullstack developer who can mentor juniors"
                  topK: 5
              forced_mode:
                summary: Forced mode example
                value:
                  text: "Java developer"
                  forceMode: "SEMANTIC"
                  topK: 3
              rag:
                summary: RAG search example
                value:
                  text: "Tell me about Thomas Andersen's experience with React"
                  topK: 5
              targeted:
                summary: Target a specific consultant and CV
                value:
                  consultantId: "thomas.andersen"
                  cvId: "default"
                  text: "Summarize key React experience and recent roles"
                  forceMode: "RAG"
                  topK: 3
      responses:
        '200':
          description: Search results with AI interpretation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSearchResponse'
        '400':
          description: Invalid request parameters
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants:
    get:
      tags: [ Consultants ]
      summary: List consultants (paged)
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Optional name filter (contains)
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Paged consultants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageConsultantSummaryDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/with-cv:
    get:
      tags: [ Consultants ]
      summary: List all consultants with their CVs (normalized entities)
      parameters:
        - in: query
          name: onlyActiveCv
          description: If true, include only active CVs for each consultant
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Consultants with nested CV structures
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsultantWithCvDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/with-cv/paged:
    get:
      tags: [ Consultants ]
      summary: List consultants with CVs (paged)
      parameters:
        - in: query
          name: onlyActiveCv
          schema:
            type: boolean
            default: false
          description: If true, include only active CVs for each consultant
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Paged consultants with CVs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageConsultantWithCvDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/{userId}/cvs:
    get:
      tags: [ Consultants ]
      summary: List CVs for a consultant by userId
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: onlyActiveCv
          required: false
          schema:
            type: boolean
            default: false
          description: If true, include only the active CV
      responses:
        '200':
          description: Consultant CVs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsultantCvDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/{userId}:
    get:
      tags: [ Consultants ]
      summary: Get consultant summary by userId
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Consultant summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsultantSummaryDto'
        '404':
          description: Not found
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/sync/run:
    post:
      tags: [ Consultants ]
      summary: Trigger a sync from Flowcase
      parameters:
        - in: query
          name: batchSize
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Max number of users to sync in this run
      responses:
        '200':
          description: Sync summary
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/search:
    post:
      tags: [ Consultants ]
      summary: Relational search for consultants
      operationId: searchConsultantsRelational
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationalSearchRequest'
            example:
              name: "kotlin"
              skillsAll: [ "KOTLIN" ]
              skillsAny: [ "BACKEND" ]
              minQualityScore: 70
              onlyActiveCv: true
              pagination:
                page: 0
                size: 10
                sort: [ "name,asc" ]
      responses:
        '200':
          description: Paged consultants matching filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageConsultantWithCvDto'
        '400':
          description: Invalid search criteria
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/search/semantic:
    post:
      tags: [ Consultants ]
      summary: Semantic (vector) search for consultants
      operationId: searchConsultantsSemantic
      description: Embeds the provided text using the configured EmbeddingProvider and performs pgvector similarity search.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemanticSearchRequest'
            example:
              text: "Senior Kotlin developer with Spring experience"
              provider: "GOOGLE_GEMINI"
              model: "text-embedding-004"
              topK: 5
              minQualityScore: 80
              onlyActiveCv: true
              pagination:
                page: 0
                size: 10
                sort: [ "name,asc" ]
      responses:
        '200':
          description: Top-K semantically similar consultants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageConsultantWithCvDto'
        '400':
          description: Invalid search criteria
        '503':
          description: Embedding provider disabled or not configured
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/search/embedding-info:
    get:
      tags: [ Consultants ]
      summary: Get embedding provider information
      description: Returns information about the available embedding provider for semantic search
      responses:
        '200':
          description: Embedding provider information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingProviderInfo'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/cv/{userId}:
    get:
      tags: [ CV ]
      summary: Get a consultant's CV (raw JSON)
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: CV data (shape depends on source)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvData'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/embeddings/run/jason:
    post:
      tags: [ Embeddings ]
      summary: Generate embeddings for Jason (demo)
      responses:
        '200':
          description: Operation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingJasonRunResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/embeddings/run:
    post:
      tags: [ Embeddings ]
      summary: Generate embeddings for a specific user/cv
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: cvId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingUserCvRunResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/embeddings/run/missing:
    post:
      tags: [ Embeddings ]
      summary: Generate embeddings for users missing vectors
      parameters:
        - in: query
          name: batchSize
          schema:
            type: integer
            minimum: 1
            default: 50
      responses:
        '200':
          description: Operation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingRunMissingResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/health:
    get:
      tags: [ Health ]
      summary: Health check
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/matches:
    post:
      tags: [ Matches ]
      summary: Find candidate matches for a project request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchApiRequest'
      responses:
        '200':
          description: List of candidate matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateMatchResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/matches/upload:
    post:
      tags: [ Matches ]
      summary: Upload a CV PDF and find matches
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ file, projectRequestText ]
              properties:
                file:
                  type: string
                  format: binary
                projectRequestText:
                  type: string
      responses:
        '200':
          description: List of candidate matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateMatchResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/matches/by-skills:
    post:
      tags: [ Matches ]
      summary: Find candidate matches given a list of skills
      description: Uses AI matching against all known consultants using a prompt derived from the provided skills.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillsRequest'
            example:
              skills: [ "java", "azure", "react" ]
      responses:
        '200':
          description: List of candidate matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateMatchResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/matches/requests:
    get:
      tags: [ Matches ]
      summary: List project requests (uploaded customer documents) with coverage info
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 0, minimum: 0 }
        - in: query
          name: size
          schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
        - in: query
          name: sort
          schema: { type: string, default: "uploadedAt,desc" }
      responses:
        '200':
          description: Paged list of requests with coverage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedMatchesListDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/matches/requests/{id}/top-consultants:
    get:
      tags: [ Matches ]
      summary: Get top consultants for a request (AI-enriched)
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, format: int64 }
        - in: query
          name: limit
          required: false
          schema: { type: integer, default: 5, minimum: 1, maximum: 10 }
      responses:
        '200':
          description: Top consultants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchConsultantDto'
        '404':
          description: Project request not found
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/project-requests:
    get:
      tags: [ Project Requests ]
      summary: List stored customer project requests with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 0
          description: Page number (0-based)
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - in: query
          name: sort
          schema:
            type: string
            default: "id,desc"
          description: Sort specification (field,direction)
      responses:
        '200':
          description: Paged project requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedProjectRequestResponseDto'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags: [ Project Requests ]
      summary: Create a new project request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequestDto'
            example:
              customerName: "Acme Corp AS"
              requiredSkills: ["KOTLIN", "JAVA"]
              startDate: "2024-04-01T09:00:00"
              endDate: "2024-10-01T17:00:00"
              responseDeadline: "2024-03-15T17:00:00"
              requestDescription: "We need a senior backend developer for a 6-month project using Kotlin and Spring Boot."
              responsibleSalespersonEmail: "sales@acme.com"
      responses:
        '201':
          description: Project request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRequestDto'
        '400':
          description: Invalid request data
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/project-requests/upload:
    post:
      tags: [ Project Requests ]
      summary: Upload and analyze a customer project request PDF
      description: |
        Uploads a PDF document and uses AI to extract structured information including:
        - Customer name from the document
        - Project summary and requirements
        - MUST vs SHOULD requirements categorization
        - Project deadline (if mentioned)
        - Upload timestamp tracking
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ file ]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Extracted project request with AI-analyzed structure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRequestResponseDto'
              example:
                id: 123
                customerName: "Acme Corporation AS"
                title: "Senior Kotlin Developer - Mobile Platform"
                summary: "Project for developing a new mobile banking application using Kotlin and modern Android architecture. Requires experienced developer with strong backend integration skills."
                originalFilename: "project-request-acme-mobile.pdf"
                uploadedAt: "2024-10-01T10:30:00Z"
                deadlineDate: "2024-12-15T00:00:00Z"
                mustRequirements:
                  - name: "5+ years experience with Kotlin/Android development"
                    details: null
                  - name: "Experience with REST API integration"
                    details: null
                  - name: "Knowledge of Material Design principles"
                    details: null
                shouldRequirements:
                  - name: "Experience with Jetpack Compose"
                    details: null
                  - name: "Familiarity with CI/CD pipelines"
                    details: null
                  - name: "Previous fintech application experience"
                    details: null
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/project-requests/{id}:
    get:
      tags: [ Project Requests ]
      summary: Get stored customer project request by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Project request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRequestResponseDto'
        '404':
          description: Not found
        default:
          $ref: '#/components/responses/ErrorResponse'
  
  /api/project-requests/{id}/close:
    put:
      tags: [ Project Requests ]
      summary: Close a project request
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Project request closed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRequestDto'
        '404':
          description: Project request not found
        default:
          $ref: '#/components/responses/ErrorResponse'
  
  /api/project-requests/{id}/analyze:
    post:
      tags: [ Project Requests ]
      summary: Trigger AI analysis for a project request
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Analysis completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRequestDto'
        '404':
          description: Project request not found
        default:
          $ref: '#/components/responses/ErrorResponse'
  
  /api/project-requests/{id}/suggestions:
    get:
      tags: [ Project Requests ]
      summary: Get AI suggestions for a project request
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: AI suggestions for the project request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AISuggestionDto'
        '404':
          description: Project request not found
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/cv-score/{candidateId}:
    get:
      tags: [ CV Scoring ]
      summary: Get CV score for a candidate
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Candidate CV score
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvScoreDto'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags: [ CV Scoring ]
      summary: Trigger scoring for single candidate
      description: Runs CV scoring for the specified candidate and stores/returns the latest score.
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated candidate CV score
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvScoreDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/cv-score/run/all:
    post:
      tags: [ CV Scoring ]
      summary: Trigger scoring for all consultants
      responses:
        '200':
          description: Scoring summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvScoringRunResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/cv-score/all:
    get:
      tags: [ CV Scoring ]
      summary: List all candidates (summary)
      responses:
        '200':
          description: Candidates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateDTO'
        default:
          $ref: '#/components/responses/ErrorResponse'

components:
  parameters:
    PageParam:
      in: query
      name: page
      description: Page number (0-indexed)
      schema:
        type: integer
        minimum: 0
        default: 0
    SizeParam:
      in: query
      name: size
      description: Page size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    SortParam:
      in: query
      name: sort
      description: Sort field(s), e.g. `name,asc`. Repeat for multi-sort.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true

  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'

  schemas:
    CoverageStatus:
      type: string
      enum: [ GREEN, YELLOW, RED, NEUTRAL ]

    MatchesListItemDto:
      type: object
      required: [ id, hitCount, coverageStatus, coverageLabel ]
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          nullable: true
        customerName:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
          nullable: true
        deadlineDate:
          type: string
          format: date-time
          nullable: true
        hitCount:
          type: integer
          format: int64
        coverageStatus:
          $ref: '#/components/schemas/CoverageStatus'
        coverageLabel:
          type: string

    PagedMatchesListDto:
      type: object
      properties:
        content:
          type: array
          items: { $ref: '#/components/schemas/MatchesListItemDto' }
        totalElements: { type: integer, format: int64 }
        totalPages: { type: integer }
        currentPage: { type: integer }
        pageSize: { type: integer }
        hasNext: { type: boolean }
        hasPrevious: { type: boolean }

    MatchConsultantDto:
      type: object
      required: [ userId, name, cvId, relevanceScore ]
      properties:
        userId: { type: string }
        name: { type: string }
        cvId: { type: string }
        relevanceScore:
          type: number
          format: double
        justification:
          type: string
          nullable: true

    RelationalSearchRequest:
      type: object
      properties:
        name:
          type: string
          description: Name filter (contains match)
        skillsAll:
          type: array
          items:
            type: string
          description: Skills that must ALL be present (AND condition)
        skillsAny:
          type: array
          items:
            type: string
          description: Skills where ANY can be present (OR condition)
        minQualityScore:
          type: integer
          minimum: 0
          maximum: 100
          description: Minimum CV quality score
        onlyActiveCv:
          type: boolean
          default: false
          description: Only include active CVs
        pagination:
          $ref: '#/components/schemas/PaginationDto'

    SemanticSearchRequest:
      type: object
      required: [ text ]
      properties:
        text:
          type: string
          description: Natural language search text
        provider:
          type: string
          default: "GOOGLE_GEMINI"
          description: Embedding provider (must match server configuration)
        model:
          type: string
          default: "text-embedding-004"
          description: Embedding model (must match server configuration)
        topK:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
          description: Maximum number of results to return
        minQualityScore:
          type: integer
          minimum: 0
          maximum: 100
          description: Minimum CV quality score
        onlyActiveCv:
          type: boolean
          default: false
          description: Only include active CVs
        pagination:
          $ref: '#/components/schemas/PaginationDto'

    EmbeddingProviderInfo:
      type: object
      required: [ enabled, provider, model, dimension ]
      properties:
        enabled:
          type: boolean
          description: Whether semantic search is available
        provider:
          type: string
          description: Name of the embedding provider
        model:
          type: string
          description: Name of the embedding model
        dimension:
          type: integer
          description: Vector dimension of the embeddings

    Skill:
      type: string
      enum: [ BACKEND, FRONTEND, JAVA, KOTLIN, REACT, TYPESCRIPT, ARCHITECTURE ]

    SkillInCompanyDto:
      type: object
      required: [ name, konsulenterMedSkill, konsulenter ]
      properties:
        name:
          type: string
        consultantCount:
          type: integer
          description: Number of consultants with this skill (preferred)
        konsulenterMedSkill:
          type: integer
          description: Number of consultants with this skill (deprecated)
          deprecated: true
        konsulenter:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantSummaryDto'

    AIAnalysisRequest:
      type: object
      required: [ content ]
      properties:
        content:
          type: string
          description: Content to analyze
    AIResponseModel:
      type: object
      properties:
        content:
          type: string
        modelUsed:
          type: string

    ConsultantSummaryDto:
      type: object
      required: [ userId, name, email, bornYear, defaultCvId ]
      properties:
        userId:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        bornYear:
          type: integer
        defaultCvId:
          type: string

    PageConsultantSummaryDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantSummaryDto'
        number:
          type: integer
          description: Page number (0-indexed)
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
        sort:
          type: object
          additionalProperties: true
        pageable:
          type: object
          additionalProperties: true

    ConsultantWithCvDto:
      type: object
      required: [ userId, name, cvId, skills, cvs ]
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        userId:
          type: string
        name:
          type: string
        cvId:
          type: string
        skills:
          type: array
          description: Top 3 skills for the consultant when available
          maxItems: 3
          items:
            type: string
        cvs:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantCvDto'

    ConsultantCvDto:
      type: object
      required: [ active ]
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        versionTag:
          type: string
          nullable: true
        qualityScore:
          type: integer
          nullable: true
        active:
          type: boolean
        keyQualifications:
          type: array
          items: { $ref: '#/components/schemas/KeyQualificationDto' }
        education:
          type: array
          items: { $ref: '#/components/schemas/EducationDto' }
        workExperience:
          type: array
          items: { $ref: '#/components/schemas/WorkExperienceDto' }
        projectExperience:
          type: array
          items: { $ref: '#/components/schemas/ProjectExperienceDto' }
        certifications:
          type: array
          items: { $ref: '#/components/schemas/CertificationDto' }
        courses:
          type: array
          items: { $ref: '#/components/schemas/CourseDto' }
        languages:
          type: array
          items: { $ref: '#/components/schemas/LanguageDto' }
        skillCategories:
          type: array
          items: { $ref: '#/components/schemas/SkillCategoryDto' }
        attachments:
          type: array
          items: { $ref: '#/components/schemas/AttachmentDto' }
        industries:
          type: array
          items:
            type: string

    KeyQualificationDto:
      type: object
      properties:
        label: { type: string, nullable: true }
        description: { type: string, nullable: true }

    EducationDto:
      type: object
      properties:
        degree: { type: string, nullable: true }
        school: { type: string, nullable: true }
        fromYearMonth: { type: string, nullable: true }
        toYearMonth: { type: string, nullable: true }

    WorkExperienceDto:
      type: object
      properties:
        employer: { type: string, nullable: true }
        fromYearMonth: { type: string, nullable: true }
        toYearMonth: { type: string, nullable: true }

    ProjectExperienceDto:
      type: object
      properties:
        customer: { type: string, nullable: true }
        description: { type: string, nullable: true }
        longDescription: { type: string, nullable: true }
        fromYearMonth: { type: string, nullable: true }
        toYearMonth: { type: string, nullable: true }
        roles:
          type: array
          items: { $ref: '#/components/schemas/ProjectRoleDto' }
        skills:
          type: array
          items: { type: string }

    ProjectRoleDto:
      type: object
      properties:
        name: { type: string, nullable: true }
        description: { type: string, nullable: true }

    CertificationDto:
      type: object
      properties:
        name: { type: string, nullable: true }
        year: { type: integer, nullable: true }

    CourseDto:
      type: object
      properties:
        name: { type: string, nullable: true }
        organizer: { type: string, nullable: true }
        year: { type: integer, nullable: true }

    LanguageDto:
      type: object
      properties:
        name: { type: string, nullable: true }
        level: { type: string, nullable: true }

    SkillCategoryDto:
      type: object
      properties:
        name: { type: string, nullable: true }
        skills:
          type: array
          items: { $ref: '#/components/schemas/SkillInCategoryDto' }

    SkillInCategoryDto:
      type: object
      properties:
        name: { type: string, nullable: true }
        durationYears: { type: integer, nullable: true }

    AttachmentDto:
      type: object
      properties:
        fileName: { type: string, nullable: true }
        url: { type: string, nullable: true }

    PageConsultantWithCvDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantWithCvDto'
        number:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
        sort:
          type: object
          additionalProperties: true
        pageable:
          type: object
          additionalProperties: true

    CvData:
      type: object
      description: Arbitrary CV JSON structure from Flowcase (includes optional displayName when available)
      properties:
        displayName:
          type: string
          description: Human-friendly name derived from consultant record
      additionalProperties: true

    EmbeddingJasonRunResponse:
      type: object
      properties:
        processedJason:
          type: boolean

    EmbeddingUserCvRunResponse:
      type: object
      required: [ userId, cvId, processed ]
      properties:
        userId:
          type: string
        cvId:
          type: string
        processed:
          type: boolean

    EmbeddingRunMissingResponse:
      type: object
      properties:
        processedCount:
          type: integer
        batchSize:
          type: integer

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ UP, DOWN, OUT_OF_SERVICE, UNKNOWN ]
        details:
          type: object
          additionalProperties:
            type: string

    MatchApiRequest:
      type: object
      required: [ projectRequestText ]
      properties:
        projectRequestText:
          type: string
          description: Project request text/requirements

    SkillsRequest:
      type: object
      required: [ skills ]
      properties:
        skills:
          type: array
          items:
            type: string

    CandidateMatchResponse:
      type: object
      required: [ totalScore, summary ]
      properties:
        totalScore:
          type: string
          description: Overall match score (string in current implementation)
        summary:
          type: string
        matchTimeSeconds:
          type: integer
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/Requirement'

    Requirement:
      type: object
      required: [ name, comment, score ]
      properties:
        name:
          type: string
        comment:
          type: string
        score:
          type: string

    CandidateDTO:
      type: object
      required: [ id, name, birthYear ]
      properties:
        id:
          type: string
        name:
          type: string
        birthYear:
          type: integer

    CvScoreDto:
      type: object
      required: [ candidateId, scorePercent, summary, strengths, potentialImprovements ]
      properties:
        candidateId:
          type: string
        scorePercent:
          type: integer
        summary:
          type: string
        strengths:
          type: array
          items:
            type: string
        potentialImprovements:
          type: array
          items:
            type: string

    CvScoringRunResponse:
      type: object
      required: [ processedCount ]
      properties:
        processedCount:
          type: integer

    ProjectRequestResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        customerName:
          type: string
          description: Customer name extracted from the document
        title:
          type: string
          description: Title/subject derived from the document
        summary:
          type: string
          description: AI-generated summary of the project request
        originalFilename:
          type: string
          description: Original filename of the uploaded PDF
        uploadedAt:
          type: string
          format: date-time
          description: Timestamp when the document was uploaded
        deadlineDate:
          type: string
          format: date-time
          description: Project deadline extracted from the document (if available)
        mustRequirements:
          type: array
          items:
            $ref: '#/components/schemas/ProjectRequirementDto'
          description: Critical requirements that must be met
        shouldRequirements:
          type: array
          items:
            $ref: '#/components/schemas/ProjectRequirementDto'
          description: Preferred requirements that would be beneficial

    ProjectRequirementDto:
      type: object
      required: [ name ]
      properties:
        name:
          type: string
        details:
          type: string

    PagedProjectRequestResponseDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ProjectRequestResponseDto'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        currentPage:
          type: integer
        pageSize:
          type: integer
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean

    CreateProjectRequestDto:
      type: object
      required: [ customerName, requiredSkills, startDate, endDate, responseDeadline, requestDescription, responsibleSalespersonEmail ]
      properties:
        customerName:
          type: string
          minLength: 1
        requiredSkills:
          type: array
          items:
            type: string
            enum: [ KOTLIN, JAVA, PYTHON, JAVASCRIPT, TYPESCRIPT, REACT, ANGULAR, VUE, SPRING_BOOT, BACKEND, FRONTEND, FULLSTACK, AZURE, AWS, DOCKER, KUBERNETES ]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        responseDeadline:
          type: string
          format: date-time
        status:
          type: string
          enum: [ OPEN, IN_PROGRESS, CLOSED ]
          default: OPEN
        requestDescription:
          type: string
          minLength: 1
        responsibleSalespersonEmail:
          type: string
          format: email

    ProjectRequestDto:
      type: object
      required: [ customerName, requiredSkills, startDate, endDate, responseDeadline, status, requestDescription, responsibleSalespersonEmail ]
      properties:
        id:
          type: integer
          format: int64
        customerId:
          type: integer
          format: int64
        customerName:
          type: string
        requiredSkills:
          type: array
          items:
            type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        responseDeadline:
          type: string
          format: date-time
        status:
          type: string
          enum: [ OPEN, IN_PROGRESS, CLOSED ]
        requestDescription:
          type: string
        responsibleSalespersonEmail:
          type: string
          format: email
        aiSuggestions:
          type: array
          items:
            $ref: '#/components/schemas/AISuggestionDto'

    AISuggestionDto:
      type: object
      required: [ consultantName, userId, cvId, matchScore, justification, createdAt ]
      properties:
        id:
          type: integer
          format: int64
        consultantName:
          type: string
        userId:
          type: string
        cvId:
          type: string
        matchScore:
          type: number
          format: double
          minimum: 0.0
          maximum: 100.0
        justification:
          type: string
        createdAt:
          type: string
          format: date-time
        skills:
          type: array
          items:
            type: string

    PaginationDto:
      type: object
      properties:
        page:
          type: integer
          minimum: 0
          default: 0
          description: Page number (0-indexed)
        size:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
          description: Number of items per page
        sort:
          type: array
          items:
            type: string
          description: Sort specifications (e.g. "name,asc", "id,desc")

    Problem:
      type: object
      description: Generic error payload
      properties:
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string

    # AI Chat Search Schemas
    
    ChatSearchRequest:
      type: object
      required:
        - text
      properties:
        conversationId:
          type: string
          description: Optional conversation ID to maintain context
          example: "conv-123"
        consultantId:
          type: string
          description: Optional consultant userId to target the query (used to bias or provide RAG context)
          example: "thomas.andersen"
        cvId:
          type: string
          description: Optional CV/resume id for the selected consultant; used to include CV JSON as context to the AI
          example: "default"
        text:
          type: string
          description: Natural language search text
          example: "Find consultants who know Kotlin and Spring"
        forceMode:
          type: string
          enum: ["STRUCTURED", "SEMANTIC", "HYBRID", "RAG"]
          description: Force a specific search mode
          example: "STRUCTURED"
        topK:
          type: integer
          minimum: 1
          maximum: 50
          default: 10
          description: Maximum number of results to return
          example: 10

    ChatSearchResponse:
      type: object
      required:
        - mode
        - latencyMs
      properties:
        mode:
          type: string
          enum: ["STRUCTURED", "SEMANTIC", "HYBRID", "RAG"]
          description: Search mode used
          example: "STRUCTURED"
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: Search results (for structured/semantic/hybrid modes)
        answer:
          type: string
          description: Generated answer text (for RAG mode)
          example: "Based on the consultant's CV..."
        sources:
          type: array
          items:
            $ref: '#/components/schemas/RAGSource'
          description: Sources used for RAG answers
        latencyMs:
          type: integer
          description: Response time in milliseconds
          example: 1250
        debug:
          $ref: '#/components/schemas/DebugInfo'
          description: Optional debug information
        conversationId:
          type: string
          description: Conversation ID for follow-up queries
        scoring:
          $ref: '#/components/schemas/ScoringInfo'

    SearchResult:
      type: object
      required:
        - consultantId
        - name
        - score
      properties:
        consultantId:
          type: string
          format: uuid
          description: Consultant ID
        name:
          type: string
          description: Consultant name
          example: "Thomas Andersen"
        score:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
          description: Relevance score (0-1)
          example: 0.87
        highlights:
          type: array
          items:
            type: string
          description: Text highlights from matching
        meta:
          type: object
          additionalProperties: true
          description: Additional metadata

    RAGSource:
      type: object
      required:
        - consultantId
        - consultantName
        - chunkId
        - text
        - score
      properties:
        consultantId:
          type: string
          format: uuid
          description: Consultant ID
        consultantName:
          type: string
          description: Consultant name
        chunkId:
          type: string
          format: uuid
          description: Chunk ID
        text:
          type: string
          description: Source text excerpt
        score:
          type: number
          format: double
          description: Relevance score
          example: 0.92
        location:
          type: string
          description: CV section location
          example: "Experience"

    DebugInfo:
      type: object
      properties:
        interpretation:
          $ref: '#/components/schemas/QueryInterpretation'
          description: Query interpretation details
        timings:
          type: object
          additionalProperties:
            type: integer
          description: Timing breakdown
        extra:
          type: object
          additionalProperties: true
          description: Additional debug data

    ScoringInfo:
      type: object
      description: HYBRID scoring weights and formula
      properties:
        semanticWeight:
          type: number
          format: double
          example: 0.7
        qualityWeight:
          type: number
          format: double
          example: 0.3
        formula:
          type: string
          example: "combined = semanticWeight * semanticScore + qualityWeight * qualityScore"

    QueryInterpretation:
      type: object
      required:
        - route
        - confidence
      properties:
        route:
          type: string
          enum: ["STRUCTURED", "SEMANTIC", "HYBRID", "RAG"]
          description: Determined search route
          example: "STRUCTURED"
        structured:
          $ref: '#/components/schemas/StructuredCriteria'
          description: Extracted structured search criteria
        semanticText:
          type: string
          description: Semantic search text
          example: "experienced fullstack developer"
        consultantName:
          type: string
          description: Detected consultant name
          example: "Thomas Andersen"
        question:
          type: string
          description: RAG question
          example: "What is his experience with React?"
        confidence:
          $ref: '#/components/schemas/ConfidenceScores'
          description: Confidence scores for the interpretation

    StructuredCriteria:
      type: object
      properties:
        skillsAll:
          type: array
          items:
            type: string
          description: Skills that must all be present
          example: ["kotlin", "spring"]
        skillsAny:
          type: array
          items:
            type: string
          description: Skills where at least one must be present
          example: ["architecture", "tech lead"]
        roles:
          type: array
          items:
            type: string
          description: Required roles or positions
          example: ["senior developer", "tech lead"]
        minQualityScore:
          type: integer
          minimum: 0
          maximum: 100
          description: Minimum quality score
          example: 85
        locations:
          type: array
          items:
            type: string
          description: Location requirements
        availability:
          type: string
          description: Availability requirements
          example: "available"

    ConfidenceScores:
      type: object
      required:
        - route
        - extraction
      properties:
        route:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
          description: Confidence in route selection (0-1)
          example: 0.87
        extraction:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
          description: Confidence in criteria extraction (0-1)
          example: 0.92

openapi: 3.0.3
info:
  title: Cloudberries Candidate Match API
  version: 1.1.0
  description: |
    API for candidate matching, CV retrieval, embeddings, and health checks.
    Includes normalized health responses and skill-based matching endpoint.
    Generated from controller sources as of this commit.
  contact:
    name: Cloudberries
servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Chat
    description: AI content analysis
  - name: Skills
    description: Company skills overview
  - name: Consultants
    description: Consultant search and sync
  - name: CV
    description: Consultant CV retrieval
  - name: Embeddings
    description: CV embedding operations
  - name: Health
    description: Health checks
  - name: Matches
    description: Candidate matching
  - name: CV Scoring
    description: CV scoring utilities

paths:
  /api/skills:
    get:
      tags: [ Skills ]
      summary: List skills across consultants
      parameters:
        - in: query
          name: skill
          description: Optional skill filter (repeat to filter by multiple)
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
      responses:
        '200':
          description: Skill aggregates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SkillInCompanyDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/chatbot/analyze:
    post:
      tags: [ Chat ]
      summary: Analyze content with AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AIAnalysisRequest'
      responses:
        '200':
          description: Analysis result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIResponseModel'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants:
    get:
      tags: [ Consultants ]
      summary: List consultants (paged)
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Optional name filter (contains)
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          description: Paged consultants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageConsultantSummaryDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/sync/run:
    post:
      tags: [ Consultants ]
      summary: Trigger a sync from Flowcase
      parameters:
        - in: query
          name: batchSize
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Max number of users to sync in this run
      responses:
        '200':
          description: Sync summary
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/search:
    post:
      tags: [ Consultants ]
      summary: Relational search for consultants
      operationId: searchConsultantsRelational
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationalSearchRequest'
            example:
              name: "kotlin"
              skillsAll: [ "KOTLIN" ]
              skillsAny: [ "BACKEND" ]
              minQualityScore: 70
              onlyActiveCv: true
      responses:
        '200':
          description: Paged consultants matching filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageConsultantSearchResultDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/consultants/search/semantic:
    post:
      tags: [ Consultants ]
      summary: Semantic (vector) search for consultants
      operationId: searchConsultantsSemantic
      description: Embeds the provided text using the configured EmbeddingProvider and performs pgvector similarity search.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SemanticSearchRequest'
            example:
              text: "Senior Kotlin developer with Spring experience"
              provider: "GOOGLE_GEMINI"
              model: "text-embedding-004"
              topK: 5
      responses:
        '200':
          description: Top-K semantically similar consultants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsultantSearchResultDto'
        '400':
          description: Embedding provider disabled or not configured
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/cv/{userId}:
    get:
      tags: [ CV ]
      summary: Get a consultant's CV (raw JSON)
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: CV data (shape depends on source)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvData'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/embeddings/run/jason:
    post:
      tags: [ Embeddings ]
      summary: Generate embeddings for Jason (demo)
      responses:
        '200':
          description: Operation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingJasonRunResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/embeddings/run:
    post:
      tags: [ Embeddings ]
      summary: Generate embeddings for a specific user/cv
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: cvId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingUserCvRunResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/embeddings/run/missing:
    post:
      tags: [ Embeddings ]
      summary: Generate embeddings for users missing vectors
      parameters:
        - in: query
          name: batchSize
          schema:
            type: integer
            minimum: 1
            default: 50
      responses:
        '200':
          description: Operation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingRunMissingResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/health:
    get:
      tags: [ Health ]
      summary: Health check
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/matches:
    post:
      tags: [ Matches ]
      summary: Find candidate matches for a project request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchApiRequest'
      responses:
        '200':
          description: List of candidate matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateMatchResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/matches/upload:
    post:
      tags: [ Matches ]
      summary: Upload a CV PDF and find matches
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ file, projectRequestText ]
              properties:
                file:
                  type: string
                  format: binary
                projectRequestText:
                  type: string
      responses:
        '200':
          description: List of candidate matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateMatchResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/matches/by-skills:
    post:
      tags: [ Matches ]
      summary: Find candidate matches given a list of skills
      description: Uses AI matching against all known consultants using a prompt derived from the provided skills.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SkillsRequest'
            example:
              skills: [ "java", "azure", "react" ]
      responses:
        '200':
          description: List of candidate matches
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateMatchResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/project-requests/upload:
    post:
      tags: [ Project Requests ]
      summary: Upload and analyze a customer project request PDF
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ file ]
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Extracted project request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRequestResponseDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/project-requests/{id}:
    get:
      tags: [ Project Requests ]
      summary: Get stored customer project request by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Project request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRequestResponseDto'
        '404':
          description: Not found
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/cv-score/{candidateId}:
    get:
      tags: [ CV Scoring ]
      summary: Get CV score for a candidate
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Candidate CV score
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvScoreDto'
        default:
          $ref: '#/components/responses/ErrorResponse'
    post:
      tags: [ CV Scoring ]
      summary: Trigger scoring for single candidate
      description: Runs CV scoring for the specified candidate and stores/returns the latest score.
      parameters:
        - in: path
          name: candidateId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Updated candidate CV score
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvScoreDto'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/cv-score/run/all:
    post:
      tags: [ CV Scoring ]
      summary: Trigger scoring for all consultants
      responses:
        '200':
          description: Scoring summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CvScoringRunResponse'
        default:
          $ref: '#/components/responses/ErrorResponse'

  /api/cv-score/all:
    get:
      tags: [ CV Scoring ]
      summary: List all candidates (summary)
      responses:
        '200':
          description: Candidates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CandidateDTO'
        default:
          $ref: '#/components/responses/ErrorResponse'

components:
  parameters:
    PageParam:
      in: query
      name: page
      description: Page number (0-indexed)
      schema:
        type: integer
        minimum: 0
        default: 0
    SizeParam:
      in: query
      name: size
      description: Page size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    SortParam:
      in: query
      name: sort
      description: Sort field(s), e.g. `name,asc`. Repeat for multi-sort.
      schema:
        type: array
        items:
          type: string
      style: form
      explode: true

  responses:
    ErrorResponse:
      description: Error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'

  schemas:
    RelationalSearchRequest:
      type: object
      properties:
        name:
          type: string
        skillsAll:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        skillsAny:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        minQualityScore:
          type: integer
        onlyActiveCv:
          type: boolean
          default: false

    SemanticSearchRequest:
      type: object
      required: [ text ]
      properties:
        text:
          type: string
        provider:
          type: string
          description: Embedding provider (defaults to server config)
        model:
          type: string
          description: Embedding model (defaults to server config)
        topK:
          type: integer
          default: 10

    ConsultantSearchResultDto:
      type: object
      required: [ userId, name, cvId ]
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        userId:
          type: string
        name:
          type: string
        cvId:
          type: string
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        similarity:
          type: number
          format: double
          nullable: true

    PageConsultantSearchResultDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantSearchResultDto'
        number:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
        sort:
          type: object
          additionalProperties: true
        pageable:
          type: object
          additionalProperties: true

    Skill:
      type: string
      enum: [ BACKEND, FRONTEND, JAVA, KOTLIN, REACT, TYPESCRIPT, ARCHITECTURE ]

    SkillInCompanyDto:
      type: object
      required: [ name, konsulenterMedSkill, konsulenter ]
      properties:
        name:
          type: string
        konsulenterMedSkill:
          type: integer
          description: Number of consultants with this skill
        konsulenter:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantSummaryDto'

    AIAnalysisRequest:
      type: object
      required: [ content ]
      properties:
        content:
          type: string
          description: Content to analyze
    AIResponseModel:
      type: object
      properties:
        content:
          type: string
        modelUsed:
          type: string

    ConsultantSummaryDto:
      type: object
      required: [ userId, name, email, bornYear, defaultCvId ]
      properties:
        userId:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        bornYear:
          type: integer
        defaultCvId:
          type: string

    PageConsultantSummaryDto:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ConsultantSummaryDto'
        number:
          type: integer
          description: Page number (0-indexed)
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
        sort:
          type: object
          additionalProperties: true
        pageable:
          type: object
          additionalProperties: true

    CvData:
      type: object
      description: Arbitrary CV JSON structure from Flowcase (includes optional displayName when available)
      properties:
        displayName:
          type: string
          description: Human-friendly name derived from consultant record
      additionalProperties: true

    EmbeddingJasonRunResponse:
      type: object
      properties:
        processedJason:
          type: boolean

    EmbeddingUserCvRunResponse:
      type: object
      required: [ userId, cvId, processed ]
      properties:
        userId:
          type: string
        cvId:
          type: string
        processed:
          type: boolean

    EmbeddingRunMissingResponse:
      type: object
      properties:
        processedCount:
          type: integer
        batchSize:
          type: integer

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [ UP, DOWN, OUT_OF_SERVICE, UNKNOWN ]
        details:
          type: object
          additionalProperties:
            type: string

    MatchApiRequest:
      type: object
      required: [ projectRequestText ]
      properties:
        projectRequestText:
          type: string
          description: Project request text/requirements

    SkillsRequest:
      type: object
      required: [ skills ]
      properties:
        skills:
          type: array
          items:
            type: string

    CandidateMatchResponse:
      type: object
      required: [ totalScore, summary ]
      properties:
        totalScore:
          type: string
          description: Overall match score (string in current implementation)
        summary:
          type: string
        matchTimeSeconds:
          type: integer
        requirements:
          type: array
          items:
            $ref: '#/components/schemas/Requirement'

    Requirement:
      type: object
      required: [ name, comment, score ]
      properties:
        name:
          type: string
        comment:
          type: string
        score:
          type: string

    CandidateDTO:
      type: object
      required: [ id, name, birthYear ]
      properties:
        id:
          type: string
        name:
          type: string
        birthYear:
          type: integer

    CvScoreDto:
      type: object
      required: [ candidateId, scorePercent, summary, strengths, potentialImprovements ]
      properties:
        candidateId:
          type: string
        scorePercent:
          type: integer
        summary:
          type: string
        strengths:
          type: array
          items:
            type: string
        potentialImprovements:
          type: array
          items:
            type: string

    CvScoringRunResponse:
      type: object
      required: [ processedCount ]
      properties:
        processedCount:
          type: integer

    ProjectRequestResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        customerName:
          type: string
        title:
          type: string
        summary:
          type: string
        originalFilename:
          type: string
        mustRequirements:
          type: array
          items:
            $ref: '#/components/schemas/ProjectRequirementDto'
        shouldRequirements:
          type: array
          items:
            $ref: '#/components/schemas/ProjectRequirementDto'

    ProjectRequirementDto:
      type: object
      required: [ name ]
      properties:
        name:
          type: string
        details:
          type: string

    Problem:
      type: object
      description: Generic error payload
      properties:
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
